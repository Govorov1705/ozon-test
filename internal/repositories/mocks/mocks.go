// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/Govorov1705/ozon-test/internal/models"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockCommentsRepository creates a new instance of MockCommentsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommentsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommentsRepository {
	mock := &MockCommentsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCommentsRepository is an autogenerated mock type for the CommentsRepository type
type MockCommentsRepository struct {
	mock.Mock
}

type MockCommentsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCommentsRepository) EXPECT() *MockCommentsRepository_Expecter {
	return &MockCommentsRepository_Expecter{mock: &_m.Mock}
}

// Add provides a mock function for the type MockCommentsRepository
func (_mock *MockCommentsRepository) Add(ctx context.Context, postID uuid.UUID, userID uuid.UUID, rootID *uuid.UUID, replyTo *uuid.UUID, content string) (*models.Comment, error) {
	ret := _mock.Called(ctx, postID, userID, rootID, replyTo, content)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 *models.Comment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, *uuid.UUID, *uuid.UUID, string) (*models.Comment, error)); ok {
		return returnFunc(ctx, postID, userID, rootID, replyTo, content)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, *uuid.UUID, *uuid.UUID, string) *models.Comment); ok {
		r0 = returnFunc(ctx, postID, userID, rootID, replyTo, content)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Comment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, *uuid.UUID, *uuid.UUID, string) error); ok {
		r1 = returnFunc(ctx, postID, userID, rootID, replyTo, content)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCommentsRepository_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockCommentsRepository_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - ctx context.Context
//   - postID uuid.UUID
//   - userID uuid.UUID
//   - rootID *uuid.UUID
//   - replyTo *uuid.UUID
//   - content string
func (_e *MockCommentsRepository_Expecter) Add(ctx interface{}, postID interface{}, userID interface{}, rootID interface{}, replyTo interface{}, content interface{}) *MockCommentsRepository_Add_Call {
	return &MockCommentsRepository_Add_Call{Call: _e.mock.On("Add", ctx, postID, userID, rootID, replyTo, content)}
}

func (_c *MockCommentsRepository_Add_Call) Run(run func(ctx context.Context, postID uuid.UUID, userID uuid.UUID, rootID *uuid.UUID, replyTo *uuid.UUID, content string)) *MockCommentsRepository_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		var arg3 *uuid.UUID
		if args[3] != nil {
			arg3 = args[3].(*uuid.UUID)
		}
		var arg4 *uuid.UUID
		if args[4] != nil {
			arg4 = args[4].(*uuid.UUID)
		}
		var arg5 string
		if args[5] != nil {
			arg5 = args[5].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
		)
	})
	return _c
}

func (_c *MockCommentsRepository_Add_Call) Return(comment *models.Comment, err error) *MockCommentsRepository_Add_Call {
	_c.Call.Return(comment, err)
	return _c
}

func (_c *MockCommentsRepository_Add_Call) RunAndReturn(run func(ctx context.Context, postID uuid.UUID, userID uuid.UUID, rootID *uuid.UUID, replyTo *uuid.UUID, content string) (*models.Comment, error)) *MockCommentsRepository_Add_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockCommentsRepository
func (_mock *MockCommentsRepository) GetByID(ctx context.Context, commentID uuid.UUID, forUpdate bool) (*models.Comment, error) {
	ret := _mock.Called(ctx, commentID, forUpdate)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *models.Comment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, bool) (*models.Comment, error)); ok {
		return returnFunc(ctx, commentID, forUpdate)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, bool) *models.Comment); ok {
		r0 = returnFunc(ctx, commentID, forUpdate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Comment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, bool) error); ok {
		r1 = returnFunc(ctx, commentID, forUpdate)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCommentsRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockCommentsRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - commentID uuid.UUID
//   - forUpdate bool
func (_e *MockCommentsRepository_Expecter) GetByID(ctx interface{}, commentID interface{}, forUpdate interface{}) *MockCommentsRepository_GetByID_Call {
	return &MockCommentsRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, commentID, forUpdate)}
}

func (_c *MockCommentsRepository_GetByID_Call) Run(run func(ctx context.Context, commentID uuid.UUID, forUpdate bool)) *MockCommentsRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockCommentsRepository_GetByID_Call) Return(comment *models.Comment, err error) *MockCommentsRepository_GetByID_Call {
	_c.Call.Return(comment, err)
	return _c
}

func (_c *MockCommentsRepository_GetByID_Call) RunAndReturn(run func(ctx context.Context, commentID uuid.UUID, forUpdate bool) (*models.Comment, error)) *MockCommentsRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetChildrenCommentsByRootIDs provides a mock function for the type MockCommentsRepository
func (_mock *MockCommentsRepository) GetChildrenCommentsByRootIDs(ctx context.Context, rootIDs []*uuid.UUID) ([]*models.Comment, error) {
	ret := _mock.Called(ctx, rootIDs)

	if len(ret) == 0 {
		panic("no return value specified for GetChildrenCommentsByRootIDs")
	}

	var r0 []*models.Comment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*uuid.UUID) ([]*models.Comment, error)); ok {
		return returnFunc(ctx, rootIDs)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*uuid.UUID) []*models.Comment); ok {
		r0 = returnFunc(ctx, rootIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Comment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []*uuid.UUID) error); ok {
		r1 = returnFunc(ctx, rootIDs)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCommentsRepository_GetChildrenCommentsByRootIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChildrenCommentsByRootIDs'
type MockCommentsRepository_GetChildrenCommentsByRootIDs_Call struct {
	*mock.Call
}

// GetChildrenCommentsByRootIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - rootIDs []*uuid.UUID
func (_e *MockCommentsRepository_Expecter) GetChildrenCommentsByRootIDs(ctx interface{}, rootIDs interface{}) *MockCommentsRepository_GetChildrenCommentsByRootIDs_Call {
	return &MockCommentsRepository_GetChildrenCommentsByRootIDs_Call{Call: _e.mock.On("GetChildrenCommentsByRootIDs", ctx, rootIDs)}
}

func (_c *MockCommentsRepository_GetChildrenCommentsByRootIDs_Call) Run(run func(ctx context.Context, rootIDs []*uuid.UUID)) *MockCommentsRepository_GetChildrenCommentsByRootIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []*uuid.UUID
		if args[1] != nil {
			arg1 = args[1].([]*uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCommentsRepository_GetChildrenCommentsByRootIDs_Call) Return(comments []*models.Comment, err error) *MockCommentsRepository_GetChildrenCommentsByRootIDs_Call {
	_c.Call.Return(comments, err)
	return _c
}

func (_c *MockCommentsRepository_GetChildrenCommentsByRootIDs_Call) RunAndReturn(run func(ctx context.Context, rootIDs []*uuid.UUID) ([]*models.Comment, error)) *MockCommentsRepository_GetChildrenCommentsByRootIDs_Call {
	_c.Call.Return(run)
	return _c
}

// GetRootCommentsByPostID provides a mock function for the type MockCommentsRepository
func (_mock *MockCommentsRepository) GetRootCommentsByPostID(ctx context.Context, postID uuid.UUID, limit *int32, offset *int32) ([]*models.Comment, error) {
	ret := _mock.Called(ctx, postID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetRootCommentsByPostID")
	}

	var r0 []*models.Comment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *int32, *int32) ([]*models.Comment, error)); ok {
		return returnFunc(ctx, postID, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *int32, *int32) []*models.Comment); ok {
		r0 = returnFunc(ctx, postID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Comment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, *int32, *int32) error); ok {
		r1 = returnFunc(ctx, postID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCommentsRepository_GetRootCommentsByPostID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRootCommentsByPostID'
type MockCommentsRepository_GetRootCommentsByPostID_Call struct {
	*mock.Call
}

// GetRootCommentsByPostID is a helper method to define mock.On call
//   - ctx context.Context
//   - postID uuid.UUID
//   - limit *int32
//   - offset *int32
func (_e *MockCommentsRepository_Expecter) GetRootCommentsByPostID(ctx interface{}, postID interface{}, limit interface{}, offset interface{}) *MockCommentsRepository_GetRootCommentsByPostID_Call {
	return &MockCommentsRepository_GetRootCommentsByPostID_Call{Call: _e.mock.On("GetRootCommentsByPostID", ctx, postID, limit, offset)}
}

func (_c *MockCommentsRepository_GetRootCommentsByPostID_Call) Run(run func(ctx context.Context, postID uuid.UUID, limit *int32, offset *int32)) *MockCommentsRepository_GetRootCommentsByPostID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 *int32
		if args[2] != nil {
			arg2 = args[2].(*int32)
		}
		var arg3 *int32
		if args[3] != nil {
			arg3 = args[3].(*int32)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockCommentsRepository_GetRootCommentsByPostID_Call) Return(comments []*models.Comment, err error) *MockCommentsRepository_GetRootCommentsByPostID_Call {
	_c.Call.Return(comments, err)
	return _c
}

func (_c *MockCommentsRepository_GetRootCommentsByPostID_Call) RunAndReturn(run func(ctx context.Context, postID uuid.UUID, limit *int32, offset *int32) ([]*models.Comment, error)) *MockCommentsRepository_GetRootCommentsByPostID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPostsRepository creates a new instance of MockPostsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPostsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPostsRepository {
	mock := &MockPostsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPostsRepository is an autogenerated mock type for the PostsRepository type
type MockPostsRepository struct {
	mock.Mock
}

type MockPostsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPostsRepository) EXPECT() *MockPostsRepository_Expecter {
	return &MockPostsRepository_Expecter{mock: &_m.Mock}
}

// Add provides a mock function for the type MockPostsRepository
func (_mock *MockPostsRepository) Add(ctx context.Context, userID uuid.UUID, title string, content string, areCommentsAllowed bool) (*models.Post, error) {
	ret := _mock.Called(ctx, userID, title, content, areCommentsAllowed)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 *models.Post
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string, bool) (*models.Post, error)); ok {
		return returnFunc(ctx, userID, title, content, areCommentsAllowed)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string, bool) *models.Post); ok {
		r0 = returnFunc(ctx, userID, title, content, areCommentsAllowed)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Post)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, string, bool) error); ok {
		r1 = returnFunc(ctx, userID, title, content, areCommentsAllowed)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPostsRepository_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockPostsRepository_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - title string
//   - content string
//   - areCommentsAllowed bool
func (_e *MockPostsRepository_Expecter) Add(ctx interface{}, userID interface{}, title interface{}, content interface{}, areCommentsAllowed interface{}) *MockPostsRepository_Add_Call {
	return &MockPostsRepository_Add_Call{Call: _e.mock.On("Add", ctx, userID, title, content, areCommentsAllowed)}
}

func (_c *MockPostsRepository_Add_Call) Run(run func(ctx context.Context, userID uuid.UUID, title string, content string, areCommentsAllowed bool)) *MockPostsRepository_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 bool
		if args[4] != nil {
			arg4 = args[4].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockPostsRepository_Add_Call) Return(post *models.Post, err error) *MockPostsRepository_Add_Call {
	_c.Call.Return(post, err)
	return _c
}

func (_c *MockPostsRepository_Add_Call) RunAndReturn(run func(ctx context.Context, userID uuid.UUID, title string, content string, areCommentsAllowed bool) (*models.Post, error)) *MockPostsRepository_Add_Call {
	_c.Call.Return(run)
	return _c
}

// DisableComments provides a mock function for the type MockPostsRepository
func (_mock *MockPostsRepository) DisableComments(ctx context.Context, postID uuid.UUID) (*models.Post, error) {
	ret := _mock.Called(ctx, postID)

	if len(ret) == 0 {
		panic("no return value specified for DisableComments")
	}

	var r0 *models.Post
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.Post, error)); ok {
		return returnFunc(ctx, postID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.Post); ok {
		r0 = returnFunc(ctx, postID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Post)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, postID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPostsRepository_DisableComments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisableComments'
type MockPostsRepository_DisableComments_Call struct {
	*mock.Call
}

// DisableComments is a helper method to define mock.On call
//   - ctx context.Context
//   - postID uuid.UUID
func (_e *MockPostsRepository_Expecter) DisableComments(ctx interface{}, postID interface{}) *MockPostsRepository_DisableComments_Call {
	return &MockPostsRepository_DisableComments_Call{Call: _e.mock.On("DisableComments", ctx, postID)}
}

func (_c *MockPostsRepository_DisableComments_Call) Run(run func(ctx context.Context, postID uuid.UUID)) *MockPostsRepository_DisableComments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPostsRepository_DisableComments_Call) Return(post *models.Post, err error) *MockPostsRepository_DisableComments_Call {
	_c.Call.Return(post, err)
	return _c
}

func (_c *MockPostsRepository_DisableComments_Call) RunAndReturn(run func(ctx context.Context, postID uuid.UUID) (*models.Post, error)) *MockPostsRepository_DisableComments_Call {
	_c.Call.Return(run)
	return _c
}

// EnableComments provides a mock function for the type MockPostsRepository
func (_mock *MockPostsRepository) EnableComments(ctx context.Context, postID uuid.UUID) (*models.Post, error) {
	ret := _mock.Called(ctx, postID)

	if len(ret) == 0 {
		panic("no return value specified for EnableComments")
	}

	var r0 *models.Post
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.Post, error)); ok {
		return returnFunc(ctx, postID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.Post); ok {
		r0 = returnFunc(ctx, postID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Post)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, postID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPostsRepository_EnableComments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnableComments'
type MockPostsRepository_EnableComments_Call struct {
	*mock.Call
}

// EnableComments is a helper method to define mock.On call
//   - ctx context.Context
//   - postID uuid.UUID
func (_e *MockPostsRepository_Expecter) EnableComments(ctx interface{}, postID interface{}) *MockPostsRepository_EnableComments_Call {
	return &MockPostsRepository_EnableComments_Call{Call: _e.mock.On("EnableComments", ctx, postID)}
}

func (_c *MockPostsRepository_EnableComments_Call) Run(run func(ctx context.Context, postID uuid.UUID)) *MockPostsRepository_EnableComments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPostsRepository_EnableComments_Call) Return(post *models.Post, err error) *MockPostsRepository_EnableComments_Call {
	_c.Call.Return(post, err)
	return _c
}

func (_c *MockPostsRepository_EnableComments_Call) RunAndReturn(run func(ctx context.Context, postID uuid.UUID) (*models.Post, error)) *MockPostsRepository_EnableComments_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function for the type MockPostsRepository
func (_mock *MockPostsRepository) GetAll(ctx context.Context) ([]*models.Post, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*models.Post
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]*models.Post, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []*models.Post); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Post)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPostsRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockPostsRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPostsRepository_Expecter) GetAll(ctx interface{}) *MockPostsRepository_GetAll_Call {
	return &MockPostsRepository_GetAll_Call{Call: _e.mock.On("GetAll", ctx)}
}

func (_c *MockPostsRepository_GetAll_Call) Run(run func(ctx context.Context)) *MockPostsRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPostsRepository_GetAll_Call) Return(posts []*models.Post, err error) *MockPostsRepository_GetAll_Call {
	_c.Call.Return(posts, err)
	return _c
}

func (_c *MockPostsRepository_GetAll_Call) RunAndReturn(run func(ctx context.Context) ([]*models.Post, error)) *MockPostsRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockPostsRepository
func (_mock *MockPostsRepository) GetByID(ctx context.Context, postID uuid.UUID, forUpdate bool) (*models.Post, error) {
	ret := _mock.Called(ctx, postID, forUpdate)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *models.Post
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, bool) (*models.Post, error)); ok {
		return returnFunc(ctx, postID, forUpdate)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, bool) *models.Post); ok {
		r0 = returnFunc(ctx, postID, forUpdate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Post)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, bool) error); ok {
		r1 = returnFunc(ctx, postID, forUpdate)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPostsRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockPostsRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - postID uuid.UUID
//   - forUpdate bool
func (_e *MockPostsRepository_Expecter) GetByID(ctx interface{}, postID interface{}, forUpdate interface{}) *MockPostsRepository_GetByID_Call {
	return &MockPostsRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, postID, forUpdate)}
}

func (_c *MockPostsRepository_GetByID_Call) Run(run func(ctx context.Context, postID uuid.UUID, forUpdate bool)) *MockPostsRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockPostsRepository_GetByID_Call) Return(post *models.Post, err error) *MockPostsRepository_GetByID_Call {
	_c.Call.Return(post, err)
	return _c
}

func (_c *MockPostsRepository_GetByID_Call) RunAndReturn(run func(ctx context.Context, postID uuid.UUID, forUpdate bool) (*models.Post, error)) *MockPostsRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUsersRepository creates a new instance of MockUsersRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUsersRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUsersRepository {
	mock := &MockUsersRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUsersRepository is an autogenerated mock type for the UsersRepository type
type MockUsersRepository struct {
	mock.Mock
}

type MockUsersRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUsersRepository) EXPECT() *MockUsersRepository_Expecter {
	return &MockUsersRepository_Expecter{mock: &_m.Mock}
}

// Add provides a mock function for the type MockUsersRepository
func (_mock *MockUsersRepository) Add(ctx context.Context, username string, hashedPassword string) (*models.User, error) {
	ret := _mock.Called(ctx, username, hashedPassword)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 *models.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*models.User, error)); ok {
		return returnFunc(ctx, username, hashedPassword)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *models.User); ok {
		r0 = returnFunc(ctx, username, hashedPassword)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, username, hashedPassword)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUsersRepository_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockUsersRepository_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - hashedPassword string
func (_e *MockUsersRepository_Expecter) Add(ctx interface{}, username interface{}, hashedPassword interface{}) *MockUsersRepository_Add_Call {
	return &MockUsersRepository_Add_Call{Call: _e.mock.On("Add", ctx, username, hashedPassword)}
}

func (_c *MockUsersRepository_Add_Call) Run(run func(ctx context.Context, username string, hashedPassword string)) *MockUsersRepository_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockUsersRepository_Add_Call) Return(user *models.User, err error) *MockUsersRepository_Add_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUsersRepository_Add_Call) RunAndReturn(run func(ctx context.Context, username string, hashedPassword string) (*models.User, error)) *MockUsersRepository_Add_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUsername provides a mock function for the type MockUsersRepository
func (_mock *MockUsersRepository) GetByUsername(ctx context.Context, username string) (*models.User, error) {
	ret := _mock.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetByUsername")
	}

	var r0 *models.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*models.User, error)); ok {
		return returnFunc(ctx, username)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = returnFunc(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, username)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUsersRepository_GetByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUsername'
type MockUsersRepository_GetByUsername_Call struct {
	*mock.Call
}

// GetByUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockUsersRepository_Expecter) GetByUsername(ctx interface{}, username interface{}) *MockUsersRepository_GetByUsername_Call {
	return &MockUsersRepository_GetByUsername_Call{Call: _e.mock.On("GetByUsername", ctx, username)}
}

func (_c *MockUsersRepository_GetByUsername_Call) Run(run func(ctx context.Context, username string)) *MockUsersRepository_GetByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUsersRepository_GetByUsername_Call) Return(user *models.User, err error) *MockUsersRepository_GetByUsername_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUsersRepository_GetByUsername_Call) RunAndReturn(run func(ctx context.Context, username string) (*models.User, error)) *MockUsersRepository_GetByUsername_Call {
	_c.Call.Return(run)
	return _c
}
