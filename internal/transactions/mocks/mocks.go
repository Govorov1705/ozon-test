// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/Govorov1705/ozon-test/internal/transactions"
	mock "github.com/stretchr/testify/mock"
)

// NewMockTx creates a new instance of MockTx. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTx(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTx {
	mock := &MockTx{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTx is an autogenerated mock type for the Tx type
type MockTx struct {
	mock.Mock
}

type MockTx_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTx) EXPECT() *MockTx_Expecter {
	return &MockTx_Expecter{mock: &_m.Mock}
}

// Commit provides a mock function for the type MockTx
func (_mock *MockTx) Commit(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTx_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type MockTx_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTx_Expecter) Commit(ctx interface{}) *MockTx_Commit_Call {
	return &MockTx_Commit_Call{Call: _e.mock.On("Commit", ctx)}
}

func (_c *MockTx_Commit_Call) Run(run func(ctx context.Context)) *MockTx_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTx_Commit_Call) Return(err error) *MockTx_Commit_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTx_Commit_Call) RunAndReturn(run func(ctx context.Context) error) *MockTx_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// Rollback provides a mock function for the type MockTx
func (_mock *MockTx) Rollback(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTx_Rollback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rollback'
type MockTx_Rollback_Call struct {
	*mock.Call
}

// Rollback is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTx_Expecter) Rollback(ctx interface{}) *MockTx_Rollback_Call {
	return &MockTx_Rollback_Call{Call: _e.mock.On("Rollback", ctx)}
}

func (_c *MockTx_Rollback_Call) Run(run func(ctx context.Context)) *MockTx_Rollback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTx_Rollback_Call) Return(err error) *MockTx_Rollback_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTx_Rollback_Call) RunAndReturn(run func(ctx context.Context) error) *MockTx_Rollback_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTxStarter creates a new instance of MockTxStarter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTxStarter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTxStarter {
	mock := &MockTxStarter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTxStarter is an autogenerated mock type for the TxStarter type
type MockTxStarter struct {
	mock.Mock
}

type MockTxStarter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTxStarter) EXPECT() *MockTxStarter_Expecter {
	return &MockTxStarter_Expecter{mock: &_m.Mock}
}

// Begin provides a mock function for the type MockTxStarter
func (_mock *MockTxStarter) Begin(ctx context.Context) (transactions.Tx, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 transactions.Tx
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (transactions.Tx, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) transactions.Tx); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(transactions.Tx)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTxStarter_Begin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Begin'
type MockTxStarter_Begin_Call struct {
	*mock.Call
}

// Begin is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTxStarter_Expecter) Begin(ctx interface{}) *MockTxStarter_Begin_Call {
	return &MockTxStarter_Begin_Call{Call: _e.mock.On("Begin", ctx)}
}

func (_c *MockTxStarter_Begin_Call) Run(run func(ctx context.Context)) *MockTxStarter_Begin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTxStarter_Begin_Call) Return(tx transactions.Tx, err error) *MockTxStarter_Begin_Call {
	_c.Call.Return(tx, err)
	return _c
}

func (_c *MockTxStarter_Begin_Call) RunAndReturn(run func(ctx context.Context) (transactions.Tx, error)) *MockTxStarter_Begin_Call {
	_c.Call.Return(run)
	return _c
}
